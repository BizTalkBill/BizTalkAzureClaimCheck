<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="AzureClaimCheckPipelineComponentBitmap" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAfElEQVQ4T6WOiQ3AIAwDMzqjsRmVQ0LN
        K56TrALxRZUN0iRbpBF4z+M1Wg4haHD32H1JJ/uZZF84pCzAuRFBijGeLcjPhacFOjtawAGQadahJYAi
        wrDc/JlitV9GqQ169q0wtZcx4xzLfqa3ClPncq5NMPdOBk8yeJJF5AMmYFxneDBvtAAAAABJRU5ErkJg
        gg==
</value>
  </data>
  <data name="ErrorPosSetNotSupported" xml:space="preserve">
    <value>AzureClaimCheckPipelineComponentStream.Position.set is not supported.</value>
  </data>
  <data name="DescrEnable" xml:space="preserve">
    <value>Is the Pipeline Component Enabled</value>
  </data>
  <data name="AzureClaimCheckPipelineComponentName" xml:space="preserve">
    <value>Azure Claim Check Pipeline Component </value>
  </data>
  <data name="ErrorFlushNotSupported" xml:space="preserve">
    <value>AzureClaimCheckPipelineComponentStream.Flush is not supported.</value>
  </data>
  <data name="ErrorSeekNotSupported" xml:space="preserve">
    <value>AzureClaimCheckPipelineComponentStream.Seek is not supported.</value>
  </data>
  <data name="DescrMessageTypeId" xml:space="preserve">
    <value>Message Type Id default value if not found in SB Properties or URL</value>
  </data>
  <data name="ErrorSetLengthNotSupported" xml:space="preserve">
    <value>AzureClaimCheckPipelineComponentStream.SetLength is not supported.</value>
  </data>
  <data name="AzureClaimCheckPipelineComponentDescription" xml:space="preserve">
    <value>Azure Claim Check Pipeline Component </value>
  </data>
  <data name="ErrorPrependDataTooLong" xml:space="preserve">
    <value>String to prepend is too long. Length of the string must not exceed 64 characters.</value>
  </data>
  <data name="DescrClientId" xml:space="preserve">
    <value>Client Id default value if not found in SB Properties or URL</value>
  </data>
  <data name="ErrorLengthNotSupported" xml:space="preserve">
    <value>AzureClaimCheckPipelineComponentStream.Length is not supported.</value>
  </data>
  <data name="ErrorWriteNotSupported" xml:space="preserve">
    <value>AzureClaimCheckPipelineComponentStream.Write is not supported.</value>
  </data>
  <data name="DescrKeyVaultClientId" xml:space="preserve">
    <value>Client Id used to lookup Azure Storage Key in Key Vault (optional)</value>
  </data>
  <data name="DescrKeyVaultClientSecret" xml:space="preserve">
    <value>Client Secret used to lookup Azure Storage Key in Key Vault (optional)</value>
  </data>
  <data name="DescrKeyVaultSecretSufix" xml:space="preserve">
    <value>Azure Key Vault Secret Sufix used to lookup secret (&lt;ClientId&gt;&lt;MessageTypeId&gt;&lt;KeyValueSecretSufix&gt;</value>
  </data>
  <data name="DescrStorageAccountKey" xml:space="preserve">
    <value>Default Azure Storage Account Key if not found in Key Vault</value>
  </data>
  <data name="DescrStorageAccountName" xml:space="preserve">
    <value>Default Azure Storage Account Name if not found in URL</value>
  </data>
  <data name="DescrStorageOutboundContainer" xml:space="preserve">
    <value>Azure Storage Container used for Send Pipeline</value>
  </data>
  <data name="DescrStorageOutboundFileName" xml:space="preserve">
    <value>File Name used for Send Pipeline (File Macros are expanded)</value>
  </data>
  <data name="PropClientId" xml:space="preserve">
    <value>Client Id</value>
  </data>
  <data name="PropEnabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="PropKeyVaultClientId" xml:space="preserve">
    <value>Azure Key Vault Client Id</value>
  </data>
  <data name="PropKeyVaultClientSecret" xml:space="preserve">
    <value>Azure Key Vault Client Secret</value>
  </data>
  <data name="PropKeyVaultSecretSufix" xml:space="preserve">
    <value>Azure Key Vault Secret Sufix</value>
  </data>
  <data name="PropMessageTypeId" xml:space="preserve">
    <value>Message Type Id</value>
  </data>
  <data name="PropStorageAccountKey" xml:space="preserve">
    <value>Azure Storage Acount Key</value>
  </data>
  <data name="PropStorageAccountName" xml:space="preserve">
    <value>Azure Storage Account Name</value>
  </data>
  <data name="PropStorageOutboundContainer" xml:space="preserve">
    <value>Azure Storage Outbound Container</value>
  </data>
  <data name="PropStorageOutboundFileName" xml:space="preserve">
    <value>Azure Storage Outbound File Name</value>
  </data>
</root>